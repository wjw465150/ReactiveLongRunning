//@wjw_note: 打包: gradlew clean build -x test

plugins {
  id 'java'
  id 'application' 
 
  //gradle的插件，shadow这个插件可以构建的时候把引用的jar包合进去
  //加上此插件后会生成一个shadowJar的task
  id "com.github.johnrengelman.shadow" version "7.0.0"
}

group = "com.github.wjw"
version = "1.0"

sourceCompatibility = '11'
targetCompatibility = '11'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
  mavenLocal()
  maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }  //优先使用阿里的镜像
  mavenCentral()
}

def vertxVersion = "4.4.0"
def junitJupiterVersion = "5.7.0"

def mainVerticleName = "com.pvub.reactivelongrunning.ApiVerticle"
def launcherClassName = "io.vertx.core.Launcher"

application {
  mainClass = launcherClassName
}

dependencies {
    implementation platform("io.vertx:vertx-stack-depchain:$vertxVersion")  //Vert.x Stack Depchain,集中了Vert.x的依赖版本管理,这样后面在导入Vert.x模块时就不必再填写版本号了!
    implementation "io.vertx:vertx-core"
    implementation "io.vertx:vertx-web"
    
    implementation "io.vertx:vertx-config"

    implementation "ch.qos.logback:logback-classic:1.2.10"
  
    // Use JUnit test framework.
    testImplementation "io.vertx:vertx-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"
}

//@wjw_note(for fatjar):
shadowJar {
  archiveClassifier = "fat"
  manifest {  //<--add
    attributes "Main-Class": launcherClassName
    attributes "Main-Verticle": mainVerticleName
  }
  
  mergeServiceFiles()
}

run {
  //@wjw_note需要终端交互的必须设置
  setStandardInput System.in
  setStandardOutput System.out
  setErrorOutput System.err
  
  args = ["run", mainVerticleName]
}

test {
  useJUnitPlatform()
}
